{
    "1": [
      {
        "title": "Технологии CSS",
        "content": [
          {
            "type": "text",
            "text": "CSS (Cascading Style Sheets) предоставляет различные технологии и возможности для оформления веб-страниц."
          }
        ]
      },
      {
        "title": "Inline CSS",
        "content": [
          {
            "type": "text",
            "text": "Inline CSS позволяет задавать стили непосредственно внутри тега HTML. Это делается с помощью атрибута style.Пример:"
          },
          {
            "type":"code",
            "language": "css",
            "code": "<p style=\"color: red; font-size: 16px;\">Текст с инлайн стилями</p>"
          }
        ]
      },
      {
        "title": "Internal CSS",
        "content": [
          {
            "type": "text",
            "text": "Internal CSS позволяет задавать стили внутри тега <style> внутри <head> секции HTML документа.Пример:"
          },
          {
            "type":"code",
            "language": "html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    h1 {\n      color: blue;\n      font-size: 24px;\n    }\n  </style>\n</head>\n<body>\n  <h1>Заголовок с внутренними стилями</h1>\n</body>\n</html>"
          }
          
        ]
      },
      {
        "title": "External CSS",
        "content": [
          {
            "type": "text",
            "text": "Внешний CSS позволяет создавать отдельные файлы со стилями, которые затем подключаются к HTML документу с помощью тега <link>.Пример внешнего файла стилей (style.css):"
          },
          {
            "type":"code",
            "language": "css",
            "code": "body {\n  background-color: #f0f0f0;\n}"
          },
          {
            "type": "text",
            "text": "Подключение в HTML:"
          },
          {
            "type":"code",
            "language": "css",
            "code": "<head>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>"
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "При использовании CSS рекомендуется изучить основные технологии и выбрать наиболее подходящий способ организации стилей для вашего проекта. Старайтесь разделять структуру HTML, стили CSS и функциональность JavaScript для более чистого и поддерживаемого кода."
          }
        ]
      }
    ],
  
    "2": [
      {
        "title": "Проектирование структуры веб-сайта",
        "content": [
          {
            "type": "text",
            "text": "При проектировании структуры веб-сайта важно учитывать организацию контента, навигацию и визуальное оформление. Давайте рассмотрим основные аспекты этого процесса."
          }
        ]
      },
      {
        "title": "Разделение на блоки",
        "content": [
          {
            "type": "text",
            "text": "Структурирование веб-сайта на блоки помогает логически разделить содержимое и обеспечить удобную навигацию. Различные секции сайта могут быть выделены с помощью <div> или других семантических элементов.\nПример:"
          },
          {
            "type": "code",
            "language": "css",
            "code": "<header>\n  <!-- Верхняя часть сайта: логотип, меню и т.д. -->\n</header>\n<nav>\n  <!-- Навигационное меню -->\n</nav>\n<main>\n  <!-- Основное содержимое страницы -->\n</main>\n<footer>\n  <!-- Нижняя часть сайта: контактная информация, ссылки и т.д. -->\n</footer>"
          }
        ]
      },
      {
        "title": "Использование семантических элементов",
        "content": [
          {
            "type": "text",
            "text": "HTML5 предоставляет множество семантических элементов, которые помогают описать структуру веб-страницы более точно. Например, <header>, <nav>, <main>, <footer> и другие."
          }
        ]
      },
      {
        "title": "CSS Grid и Flexbox",
        "content": [
          {
            "type": "text",
            "text": "Использование CSS Grid и Flexbox позволяет легко создавать гибкие и адаптивные макеты для веб-сайта. Эти технологии обеспечивают удобное позиционирование и выравнивание элементов.\nПример использования Flexbox для центрирования элементов:"
          },
          {
            "type": "code",
            "language": "css",
            "code": ".container {\n  display: flex;\n  justify-content: center; /* Горизонтальное центрирование */\n  align-items: center; /* Вертикальное центрирование */\n}"
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "При проектировании структуры веб-сайта следует обратить внимание на удобство использования для пользователей, семантичность кода и адаптивность под различные устройства. Используйте современные технологии CSS для создания гибких и красивых макетов."
          }
        ]
      }
    ],
  
    "3": [
      {
        "title": "CSS правила",
        "content": [
          {
            "type": "text",
            "text": "CSS (Cascading Style Sheets) представляет собой язык стилей, который используется для оформления веб-страниц. Для применения стилей к элементам HTML используются CSS правила."
          }
        ]
      },
      {
        "title": "Синтаксис CSS правила",
        "content": [
          {
            "type": "text",
            "text": "CSS правило состоит из селектора и блока объявлений стилей.Пример:"
          },
          {
            "type": "code",
            "language": "css",
            "code": "selector {\n  property: value;\n}"
          },
          {
            "type": "text",
            "text": "Селектор: Определяет, к каким элементам будет применяться стиль. Например, h1, .class, #id, div > p и др.\nБлок объявлений стилей: Содержит одно или несколько объявлений стилей, каждое из которых состоит из свойства и значения."
          }
          
        ]
      },
      {
        "title": "Примеры CSS правил",
        "content": [
          {
            "type": "code",
            "language": "css",
            "code": "/* Стиль для всех заголовков h1 */\nh1 {\n  color: blue;\n  font-size: 24px;\n}\n/* Стиль для элементов с классом \"example\" */\n.example {\n  background-color: #f0f0f0;\n  padding: 10px;\n}\n/* Стиль для элемента с id \"main-content\" */\n#main-content {\n  border: 1px solid black;\n  margin-top: 20px;\n}"
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "При написании CSS правил важно следить за структурой и организацией кода. Используйте семантические селекторы для более ясного понимания структуры стилей. Также старайтесь избегать дублирования кода и используйте наследование и классы для повторно используемых стилей."
          }
        ]
      }
    ],
  
    "4": [
      {
        "title": "Использование классов в CSS",
        "content": [
          {
            "type": "text",
            "text": "Классы в CSS позволяют создавать независимые группы стилей и применять их к элементам HTML. Это полезно для повторного использования стилей и создания более гибких структур."
          }
        ]
      },
      {
        "title": "Создание классов",
        "content": [
          {
            "type": "text",
            "text": "Для создания класса в CSS используется точка перед именем класса.\nПример:"
          },
          {
            "type": "code",
            "language": "css",
            "code": ".my-class {\n  color: red;\n  font-size: 18px;\n}"
          }
        ]
      },
      {
        "title": "Применение классов в HTML",
        "content": [
          {
            "type": "text",
            "text": "Для применения класса к элементу HTML используется атрибут class.\nПример:"
          },
          {
            "type": "code",
            "language": "css",
            "code": "<p class=\"my-class\">Текст с классом \"my-class\"</p>"
          }
        ]
      },
      {
        "title": "Комбинирование классов",
        "content": [
          {
            "type": "text",
            "text": "Элемент может иметь несколько классов, которые перечисляются через пробел в атрибуте class.\nПример:"
          },
          {
            "type": "code",
            "language": "css",
            "code": "<div class=\"class1 class2\">Элемент с несколькими классами</div>"
          }
        ]
      },
      {
        "title": "Приоритет классов",
        "content": [
          {
            "type": "text",
            "text": "При наличии нескольких классов у элемента, стили из класса с более высоким приоритетом будут применены."
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "Использование классов в CSS позволяет создавать модульные и гибкие структуры стилей. Рекомендуется назначать классы по смыслу (например, .header, .footer, .button) и избегать излишнего использования глобальных стилей, предпочитая настройку стилей на уровне классов."
          }
        ]
      }
    ],
  
    "5": [
      {
        "title": "Использование идентификаторов в CSS",
        "content": [
          {
            "type": "text",
            "text": "Идентификаторы в CSS позволяют уникально идентифицировать элементы на странице и применять к ним стили. Идентификаторы должны быть уникальными в пределах документа."
          }
        ]
      },
      {
        "title": "Создание идентификаторов",
        "content": [
          {
            "type": "text",
            "text": "Для создания идентификатора в CSS используется символ # перед именем идентификатора."
          },
          {
            "type": "code",
            "language": "css",
            "code": "#my-id {\n  color: blue;\n  font-size: 20px;\n}"
          }
        ]
      },
      {
        "title": "Применение идентификаторов в HTML",
        "content": [
          {
            "type": "text",
            "text": "Идентификатор применяется к элементу HTML с помощью атрибута id.\nПример:"
          },
          {
            "type": "code",
            "language": "css",
            "code": "<div id=\"my-id\">Элемент с идентификатором \"my-id\"</div>"
          }
        ]
      },
      {
        "title": "Уникальность идентификаторов",
        "content": [
          {
            "type": "text",
            "text": "Идентификаторы должны быть уникальными на странице. Повторное использование одного и того же идентификатора может привести к непредсказуемому поведению стилей."
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "Использование идентификаторов в CSS полезно для стилизации уникальных элементов, таких как особые блоки или области на странице. Однако рекомендуется ограничивать использование идентификаторов в стилях критических элементов, а для большей гибкости и повторного использования предпочитать классы."
          }
        ]
      }
    ],
  
    "6": [
      {
        "title": "Использование псевдоклассов CSS в веб-документах",
        "content": [
          {
            "type": "text",
            "text": "Псевдоклассы в CSS позволяют применять стили к элементам в определенных состояниях или контекстах, не меняя самого HTML кода. Они очень полезны для создания интерактивных и адаптивных стилей."
          }
        ]
      },
      {
        "title": "Применение псевдоклассов",
        "content": [
          {
            "type": "text",
            "text": "Псевдоклассы указываются после основного селектора и обозначаются двоеточием.\nПримеры:"
          },
          {
            "type": "text",
            "text": ":hover - применяет стили к элементу при наведении на него курсора мыши."
          },
          {
            "type": "text",
            "text": ":active - применяет стили к элементу во время активации (нажатия)."
          },
          {
            "type": "text",
            "text": "Пример использования :hover:"
          },
          {
            "type": "code",
            "language":"css",
            "code": ".btn:hover {\n  background-color: #007bff;\n  color: #fff;\n}"
          }
        ]
      },
      {
        "title": "Другие популярные псевдоклассы",
        "content": [
          {
            "type": "text",
            "text": ":focus - применяет стили к элементу, находящемуся в фокусе (например, при нажатии на input)."
          },
          
          {
            "type": "text",
            "text": ":first-child и :last-child - применяют стили к первому и последнему дочернему элементу соответственно."
          },
          {
            "type": "text",
            "text": ":nth-child(n) - применяет стили к элементу, который является n-ным дочерним элементом своего родителя."
          },
          {
            "type": "text",
            "text": "Пример использования :first-child для стилизации первого параграфа:"
          },
          {
            "type": "code",
            "language": "css",
            "code": "p:first-child {\n  font-weight: bold;\n}"
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "Использование псевдоклассов позволяет создавать интересные и динамичные эффекты на веб-странице. Однако следует быть осторожным с их применением, чтобы не перегружать страницу лишними стилями. Также, помните о кроссбраузерной совместимости при использовании некоторых псевдоклассов."
          }
        ]
      }
    ],
    "7": [
      {
        "title": "Использование принципов наследования CSS в веб-документе",
        "content": [
          {
            "type": "text",
            "text": "Принцип наследования в CSS позволяет элементам наследовать определенные свойства от их родительских элементов. Это помогает сократить количество повторяемого кода и облегчает поддержку стилей."
          }
        ]
      },
      {
        "title": "Свойства, которые наследуются",
        "content": [
          {
            "type": "text",
            "text": "Некоторые свойства в CSS по умолчанию наследуются от родительских элементов, такие как цвет текста (color), размер шрифта (font-size), стиль шрифта (font-style) и другие."
          }
        ]
      },
      {
        "title": "Пример наследования",
        "content": [
          {
            "type": "text",
            "text": "Предположим, у нас есть следующий код:"
          },
          {
            "type": "code",
            "language": "css",
            "code": "body {\n  font-family: Arial, sans-serif;\n  color: #333;\n}\n.content {\n  font-size: 18px; /* Наследуется от body */\n}"
          },
          {
            "type": "text",
            "text": "В этом примере элементы с классом .content будут наследовать шрифт Arial, цвет текста #333 и размер шрифта 18px от родительского элемента body."
          }
        ]
      },
      {
        "title": "Отмена наследования",
        "content": [
          {
            "type": "text",
            "text": "Некоторые свойства можно явно отменить для определенных элементов, используя значение inherit или указав другое значение.Пример отмены наследования размера шрифта:"
          },
          {
            "type": "code",
            "language": "css",
            "code": ".special-text {\n  font-size: 16px; /* Не наследует размер шрифта от родителя */\n}"
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "Используйте принцип наследования в CSS для того, чтобы сделать структуру стилей более логичной и эффективной. Однако помните, что не все свойства наследуются автоматически, и иногда может потребоваться явно указать наследование или отменить его. Также, следите за цепочкой наследования, чтобы избежать неожиданных результатов стилей."
          }
        ]
      }
    ],
    "8": [
      {
        "title": "Использование приоритетов правил CSS в веб-документе",
        "content": [
          {
            "type": "text",
            "text": "Приоритеты правил CSS определяют, какие стили будут применены к элементам при конфликте между различными правилами. Понимание приоритетов помогает управлять стилями и избегать неожиданных результатов."
          }
        ]
      },
      {
        "title": "Приоритеты стилей",
        "content": [
          {
            "type": "text",
            "text": "Приоритеты стилей в CSS определяются на основе специфичности селекторов, веса важности и порядка объявления."
          },
          {
            "type": "text",
            "text": "Специфичность селекторов: Чем более специфичный селектор, тем выше его приоритет. Например, #id имеет большую специфичность, чем .class, а inline styles имеют наивысший приоритет."
          },
          {
            "type": "text",
            "text": "Вес важности (!important): Свойства, помеченные как !important, имеют наивысший приоритет и переопределяют другие стили."
          },
          {
            "type": "text",
            "text": "Порядок объявления: Если два правила имеют одинаковую специфичность и вес важности, то последнее объявление имеет приоритет."
          }
        ]
      },
      {
        "title": "Пример приоритетов",
        "content": [
          {
            "type":"code",
            "language": "css",
            "code": "/* Общее правило */\np {\n  color: blue;\n}\n/* Более специфичное правило */\n.container p {\n  color: red;\n}\n/* Правило с весом важности */\n.important-text {\n  color: green !important;\n}"
          }
          
        ]
      },
      {
        "title": "Применение приоритетов",
        "content": [
          {
            "type": "text",
            "text": "При конфликте между разными правилами браузер применяет правило с более высоким приоритетом. Следите за порядком объявления и избегайте чрезмерного использования !important, чтобы не нарушать логику стилей."
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "При работе с CSS важно понимать приоритеты правил и использовать их с умом. Старайтесь создавать чистые и логичные структуры стилей, избегая излишнего использования !important и сложных селекторов, которые могут привести к неожиданным результатам."
          }
        ]
      }
    ],
  
    "9": [
      {
        "title": "Использование CSS для макетирования - оформление границ элемента",
        "content": [
          {
            "type": "text",
            "text": "Оформление границ элемента в CSS позволяет создавать разные виды рамок вокруг элементов, что помогает улучшить внешний вид и структуру веб-страницы."
          }
        ]
      },
      {
        "title": "Свойства оформления границ",
        "content": [
          {
            "type": "text",
            "text": "В CSS существует несколько свойств для оформления границ элементов:"
          },
          {
            "type": "text",
            "text": "border-width: задает толщину границы."
          },
          {
            "type": "text",
            "text": "border-style: определяет стиль границы (например, solid, dashed, dotted и т.д.)."
          },
          {
            "type": "text",
            "text": "border-color: указывает цвет границы."
          }
         
        ]
      },
      {
        "title": "Пример использования свойств границ",
        "content": [
          {
            "type": "code",
            "language": "css",
            "code": ".bordered-element {\n  border-width: 2px; /* Толщина границы */\n  border-style: solid; /* Стиль границы (сплошная линия) */\n  border-color: #ccc; /* Цвет границы */\n}"
          }
        ]
      },
      {
        "title": "Указание отдельных сторон границы",
        "content": [
          {
            "type": "text",
            "text": "Также можно указать стили и цвета для отдельных сторон границы, используя свойства вроде border-top, border-right, border-bottom, border-left.\nПример:"
          },
          {
            "type": "code",
            "language": "css",
            "code": ".custom-border {\n  border-top: 1px dashed blue; /* Верхняя граница: толщина, стиль, цвет */\n  border-right: 2px solid green; /* Правая граница: толщина, стиль, цвет */\n}"
          }
        ]
      },
      {
        "title": "Личный совет для новичков во фронтенд-разработке",
        "content": [
          {
            "type": "text",
            "text": "При использовании границ важно подбирать подходящие толщины, стили и цвета в соответствии с общим дизайном страницы. Также, не забывайте о доступности и удобстве использования, чтобы границы не перегружали интерфейс и не мешали восприятию контента."
          }
        ]
      }
    ],
  
    "10": [
        {
          "title": "Использование CSS для макетирования - внутренние и внешние отступы элемента",
          "content": [
            {
              "type": "text",
              "text": "Внутренние и внешние отступы в CSS позволяют создавать пространство вокруг элементов, что помогает улучшить визуальное оформление и распределение элементов на веб-странице."
            }
          ]
        },
        {
          "title": "Внутренние отступы (padding)",
          "content": [
            {
              "type": "code",
              "language": "css",
              "code": ".padded-element {\n  padding: 10px; /* Устанавливает одинаковые отступы по всем сторонам элемента */\n}"
            }
            
          ]
        },
        {
          "title": "Отдельные стороны отступов",
          "content": [
            {
              "type": "text",
              "text": "Можно также задать отдельные внутренние отступы для каждой стороны элемента, используя свойства padding-top, padding-right, padding-bottom, padding-left.Пример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".custom-padding {\n  padding-top: 15px;\n  padding-bottom: 20px;\n}"
            }
          ]
        },
        {
          "title": "Внешние отступы (margin)",
          "content": [
            {
              "type": "text",
              "text": "Свойство margin определяет внешние отступы элемента, т.е. пространство между элементами или между элементом и его родителем.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".margined-element {\n  margin: 15px; /* Устанавливает одинаковые внешние отступы по всем сторонам элемента */\n}"
            }
          ]
        },
        {
          "title": "Отдельные стороны внешних отступов",
          "content": [
            {
              "type": "text",
              "text": "Аналогично внутренним отступам, можно задать отдельные внешние отступы для каждой стороны элемента, используя свойства margin-top, margin-right, margin-bottom, margin-left.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".custom-margin {\n  margin-left: 10px;\n  margin-right: 20px;\n}"
            }
          ]
        },
        {
          "title": "Личный совет для новичков во фронтенд-разработке",
          "content": [
            {
              "type": "text",
              "text": "Используйте внутренние и внешние отступы для создания пространства и разделения элементов на странице. Это поможет сделать макет более читаемым и эстетичным. Однако не злоупотребляйте отступами, чтобы избежать излишнего пространства и сбивания сетки."
            }
          ]
        }
    ],
  
    "11": [
        {
          "title": "Позиционирование элементов при помощи CSS в веб-документе",
          "content": [
            {
              "type": "text",
              "text": "Позиционирование элементов в CSS позволяет точно определить местоположение элемента на веб-странице. Существуют различные методы позиционирования, каждый из которых имеет свои особенности и применение."
            }
          ]
        },
        {
          "title": "Стандартное позиционирование (static)",
          "content": [
            {
              "type": "text",
              "text": "Это дефолтное поведение для элементов. Они располагаются в документе в порядке, заданном в HTML, и игнорируют свойства позиционирования.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".static-position {\n  position: static;\n}"
            }
          ]
        },
        {
          "title": "Позиционирование по абсолютным координатам (absolute)",
          "content": [
            {
              "type": "text",
              "text": "Элемент позиционируется относительно его ближайшего позиционированного (не static) родителя или, если такого нет, относительно body.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".absolute-position {\n  position: absolute;\n  top: 50px; /* отступ сверху */\n  left: 20px; /* отступ слева */\n}"
            }
          ]
        },
        {
          "title": "Позиционирование относительно родителя (relative)",
          "content": [
            {
              "type": "text",
              "text": "Элемент позиционируется относительно своего обычного расположения в потоке документа, но его финальное местоположение может быть изменено с помощью свойств top, right, bottom, left.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".relative-position {\n  position: relative;\n  top: 10px; /* отступ сверху */\n  left: -5px; /* отступ слева */\n}"
            }
          ]
        },
        {
          "title": "Фиксированное позиционирование (fixed)",
          "content": [
            {
              "type": "text",
              "text": "Элемент позиционируется относительно окна браузера и остается на месте даже при прокрутке страницы.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".fixed-position {\n  position: fixed;\n  top: 0; /* элемент прикреплен к верхней части окна */\n  right: 0; /* элемент прикреплен к правой части окна */\n}"
            }
          ]
        },
        {
          "title": "Личный совет для новичков во фронтенд-разработке",
          "content": [
            {
              "type": "text",
              "text": "Изучение и понимание различных методов позиционирования поможет вам создавать сложные и адаптивные макеты. Важно помнить, что позиционирование может влиять на поведение элементов при изменении размеров окна браузера, поэтому тестируйте ваши макеты на различных устройствах и разрешениях экрана."
            }
          ]
        }
    ],
  
    "12": [
        {
          "title": "Размещение элементов при помощи CSS в веб-документе",
          "content": [
            {
              "type": "text",
              "text": "Размещение элементов в CSS связано с их расположением внутри родительского контейнера или в потоке документа. Существуют различные методы размещения, которые позволяют создавать гибкие и адаптивные макеты."
            }
          ]
        },
        {
          "title": "Блочное размещение (display: block)",
          "content": [
            {
              "type": "text",
              "text": "Элементы с таким свойством занимают всю доступную ширину родительского контейнера и начинаются с новой строки.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".block-element {\n  display: block;\n}"
            }
          ]
        },
        {
          "title": "Инлайн-блочное размещение (display: inline-block)",
          "content": [
            {
              "type": "text",
              "text": "Элементы с этим свойством занимают только столько места, сколько нужно для их содержимого, и не начинаются с новой строки.\nПример:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".inline-block-element {\n  display: inline-block;\n}"
            }
          ]
        },
        {
          "title": "Флексбокс (display: flex)",
          "content": [
            {
              "type": "text",
              "text": "Flexbox предоставляет мощные возможности для создания гибких макетов. Элементы внутри flex-контейнера могут быть выравнены и распределены по горизонтали или вертикали.\nПример контейнера:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".flex-container {\n  display: flex;\n  justify-content: space-between; /* Распределение элементов по ширине контейнера */\n  align-items: center; /* Выравнивание элементов по центру по вертикали */\n}"
            }
          ]
        },
        {
          "title": "Сеточное размещение (display: grid)",
          "content": [
            {
              "type": "text",
              "text": "Grid Layout позволяет создавать сложные макеты с помощью сетки ячеек. Это очень мощный инструмент для размещения элементов.\nПример контейнера:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr; /* Создание сетки из двух столбцов с пропорциональной шириной */\n  gap: 10px; /* Промежутки между ячейками */\n}"
            }
          ]
        },
        {
          "title": "Личный совет для новичков во фронтенд-разработке",
          "content": [
            {
              "type": "text",
              "text": "Изучение различных методов размещения поможет вам создавать адаптивные и удобные макеты для ваших веб-страниц. Попробуйте экспериментировать с разными свойствами и комбинациями для достижения нужного визуального эффекта."
            }
          ]
        }
    ],
  
    "13": [
      {
          "title": "Очистка потоков CSS в веб-документе",
          "content": [
            {
              "type": "text",
              "text": "Очистка потоков CSS относится к техникам, которые помогают управлять расположением и поведением элементов в потоке документа, особенно в контексте работы с плавающими элементами и сетками."
            }
          ]
      },
      {
          "title": "Очистка плавающих элементов",
          "content": [
            {
              "type": "text",
              "text": "Плавающие элементы могут выходить из потока документа и влиять на расположение других элементов. Для очистки эффекта плавания используется свойство clear.\nПример очистки плавающих элементов:"
            },
            {
              "type": "code",
              "language":"css",
              "code": ".clearfix::after {\n  content: \"\";\n  display: table;\n  clear: both;\n}"
            },
            {
              "type": "text",
              "text": "Использование класса clearfix на родительском элементе позволит избежать проблем с выходом плавающих элементов из потока."
            }
          ]
      },
      {
          "title": "Очистка потока для сеточных элементов",
          "content": [
            {
              "type": "text",
              "text": "При работе с сеточными элементами, такими как flexbox или grid, иногда может потребоваться очистка потока для правильного выравнивания и поведения элементов.\nПример использования overflow: auto для очистки потока:"
            },
            {
              "type": "code",
              "language": "css",
              "code": ".grid-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 10px;\n  overflow: auto; /* Очистка потока для сеточных элементов */\n}"
            },
            {
              "type": "text",
              "text": "Это свойство помогает контейнеру справляться с размерами и расположением элементов внутри себя."
            }
          ]
      },
      {
          "title": "Личный совет для новичков во фронтенд-разработке",
          "content": [
            {
              "type": "text",
              "text": "При работе с CSS, особенно при использовании плавающих элементов или сеточных систем, не забывайте о методах очистки потока. Это поможет избежать непредвиденных проблем с визуальным оформлением и расположением элементов на странице."
            }
          ]
      }
    ]   
  }
    