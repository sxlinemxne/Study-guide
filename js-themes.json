{
    "1": [
      {
        "title": "Работа с элементами объекта браузера средствами JavaScript",
        "content": [
          {
            "type": "text",
            "text": "JavaScript тесно взаимодействует с DOM (Document Object Model) — моделью, представляющей структуру веб-страницы как дерево элементов. Это позволяет изменять и управлять элементами веб-страницы. Основные доступные операции:"
          }
        ]
      },
      {
        "title": "Получение элементов",
        "content": [
          {
            "type": "text",
            "text": "getElementById(id) — находит элемент по ID."
          },
          {
            "type": "text",
            "text": "querySelector(selector) — возвращает первый элемент по CSS-селектору."
          },
          {
            "type": "text",
            "text": "querySelectorAll(selector) — находит все элементы по селектору."
          }
        ]
      },
      {
        "title": "Изменение содержимого",
        "content": [
          {
            "type": "text",
            "text": "innerHTML — устанавливает или получает HTML внутри элемента."
          },
          {
            "type": "text",
            "text": "textContent — управляет текстом элемента."
          }
          
        ]
      },
      {
        "title": "Работа со стилями",
        "content": [
          {
            "type": "text",
            "text": "style — изменяет стили напрямую."
          },
          {
            "type": "text",
            "text": "classList — управляет классами (добавление, удаление)."
          }
        ]
      },
      {
        "title": "Добавление и удаление",
        "content": [
          {
            "type": "text",
            "text": "createElement(tag) — создает новый элемент."
          },
          {
            "type": "text",
            "text": "appendChild() — добавляет элемент."
          }
        ]
      },
      {
        "title": "Интересный факт",
        "content": [
          {
            "type": "text",
            "text": "DOM стандартизирован с 1998 года. До этого браузеры имели свои собственные решения, что усложняло разработку сайтов."
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "JavaScript позволяет эффективно управлять элементами веб-страниц, делая их динамичными и интерактивными."
          }
        ]
      }
    ],
  
    "2": [
      {
        "title": "Обработка событий браузера",
        "content": [
          {
            "type": "text",
            "text": "События — это действия пользователя или браузера (например, клик, ввод текста, загрузка страницы), которые можно отследить и обработать с помощью JavaScript."
          }
        ]
      },
      {
        "title": "Типы событий",
        "content": [
          {
            "type": "text",
            "text": "Мышь: click, mouseover, mouseout."
          },
          {
            "type": "text",
            "text": "Клавиатура: keydown, keyup."
          },
          {
            "type": "text",
            "text": "Форма: submit, input, change."
          },
          {
            "type": "text",
            "text": "Загрузка: load, DOMContentLoaded."
          }
        ]
      },
      {
        "title": "Особенности",
        "content": [
          {
            "type": "text",
            "text": "Можно добавлять несколько обработчиков к одному событию."
          },
          {
            "type": "text",
            "text": "События можно отменить с помощью preventDefault(), если нужно предотвратить стандартное поведение (например, отправку формы)."
          },
          {
            "type": "text",
            "text": "Всплытие (bubbling) и перехват (capturing) позволяют управлять порядком обработки событий, начиная с дочерних или родительских элементов."
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "Обработка событий позволяет создавать интерактивные элементы на веб-странице, реагируя на действия пользователя и изменяя поведение интерфейса в реальном времени."
          }
        ]
      }
    ],
  
    "3": [
      {
        "title": "Значения и типы в JavaScript",
        "content": [
          {
            "type": "text",
            "text": "JavaScript — это динамически типизированный язык, где переменные могут принимать значения разных типов без явного указания типа. Обсудим основные типы данных:"
          }
        ]
      },
      {
        "title": "Примитивные типы",
        "content": [
          {
            "type": "text",
            "text": "Number — для чисел, включая целые и дробные (например, 42, 3.14)."
          },
          {
            "type": "text",
            "text": "String— строки текста (например, \"Hello, World!\")."
          },
          {
            "type": "text",
            "text": "Boolean — логический тип, принимает значения true или false."
          },
          {
            "type": "text",
            "text": "Null— представляет \"пустое\" значение."
          },
          {
            "type": "text",
            "text": "Undefined — значение переменной, которая была объявлена, но не инициализирована."
          },
          {
            "type": "text",
            "text": "Symbol — уникальные идентификаторы (используются редко)"
          },
          {
            "type": "text",
            "text": "BigInt — для работы с большими целыми числами, превышающими ограничения типа Number."
          }
          
        ]
      },
      {
        "title": "Объекты",
        "content": [
            
          {
            "type": "text",
            "text": "Объекты — это сложные структуры данных, которые могут содержать свойства и методы.\n Например"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "{ name: \"John\", age: 30 }"
          }
        ]
      },
      {
        "title": "Преобразование типов",
        "content": [
          {
            "type": "text",
            "text": "JavaScript автоматически преобразует типы при необходимости. Например, строка \"5\" может быть преобразована в число в выражении 5 + \"5\", результатом чего станет \"55\". Это называется неявным приведением типов."
          },
          {
            "type": "text",
            "text": "Для явного преобразования используются функции:"
          },
          {
            "type": "text",
            "text": "Number(value) — преобразует к числу."
          },
          {
            "type": "text",
            "text": "String(value) — преобразует к строке."
          },
          {
            "type": "text",
            "text": "Boolean(value) — преобразует к булевому значению."
          }
        ]
      },
      {
        "title": "Интересные факты",
        "content": [
          {
            "type": "text",
            "text": "Переменная в JavaScript может менять тип данных на лету.\n Пример:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   let x = 5; // число\n   x = \"Hello\"; // строка"
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "Знание типов и их преобразований в JavaScript помогает избежать ошибок и писать более предсказуемый код, особенно с учетом динамической типизации и неявного приведения данных."
          }
        ]
    }
    ],
  
    "4": [
      {
        "title": "Значения и операторы в JavaScript",
        "content": [
          {
            "type": "text",
            "text": "JavaScript использует значения и операторы для выполнения различных операций."
          }
        ]
      },
      {
        "title": "Типы значений",
        "content": [
          {
            "type": "text",
            "text": "Примитивные типы, к которым относят:"
          },
          {
            "type": "text",
            "text": "Number — числа (42, 3.14)."
          },
          {
            "type": "text",
            "text": "String — строки (\"Hello\")."
          },
          {
            "type": "text",
            "text": "Boolean — логические значения (true, false)."
          },
          {
            "type": "text",
            "text": "Null, Undefined — пустое или неинициализированное значение."
          },
          {
            "type": "text",
            "text": "BigInt, Symbol — специальные типы."
          },
          {
            "type": "text",
            "text": "Объектные: массивы, объекты, функции."
          }
        ]
      },
      {
        "title": "Основные операторы",
        "content": [
          {
            "type": "text",
            "text": "Арифметические: `+`, `-`, `*`, `/`, `%` (остаток), `**` (степень)."
          },
          {
            "type": "text",
            "text": "Сравнения: `==`, `===`, `!=`, `!==`, `<`, `>`."
          },
          {
            "type": "text",
            "text": "Логические: `&&` (И), `||` (ИЛИ), `!` (НЕ)."
          },
          {
            "type": "text",
            "text": "Присваивания: `=`, `+=`, `-=`."
          },
          {
            "type": "text",
            "text": "Инкремент/декремент: `++`, `--`."
          },
          {
            "type": "text",
            "text": "Тернарный оператор: `условие ? true : false`."
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "Операторы позволяют выполнять вычисления и манипуляции с данными в JavaScript."
          }
        ]
      }
    ],
  
    "5": [
      {
        "title": "Структура программы в JavaScript",
        "content": [
          {
            "type": "text",
            "text": "Инструкции — выполняемые команды, часто завершаются точкой с запятой:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   let x = 10;"
          },
          {
            "type": "text",
            "text": "Комментарии — пояснения в коде, бывают однострочными и многострочными:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "// однострочный комментарий\n /* многострочный\nкомментарий */"
          },
          {
            "type": "text",
            "text": "Переменные— хранят данные:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   let name = \"John\";\n   const pi = 3.14;"
          },
          {
            "type": "text",
            "text": "Функции — блоки кода, выполняемые по вызову:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   function greet() {\n      console.log(\"Hello\");\n   }"
          },
          {
            "type": "text",
            "text": "Условные операторы — для ветвления логики:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   if (x > 5) { ... } else { ... }"
          },
          {
            "type": "text",
            "text": "Циклы — повторение действий:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   for (let i = 0; i < 5; i++) { ... }"
          },
          {
            "type": "text",
            "text": "Обработчики событий — реагируют на действия пользователя:"
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   button.addEventListener(\"click\", () => alert(\"Нажато!\"));"
          }
        ]
      }
    ],
  
    "6": [
      {
        "title": "Использование функций при процедурном подходе в JavaScript",
        "content": [
          {
            "type": "text",
            "text": "Функции — основа процедурного программирования, обеспечивающая модульность и повторное использование кода. Программа делится на последовательные вызовы функций, каждая из которых выполняет конкретную задачу."
          }
        ]
      },
      {
        "title": "Основные концепции",
        "content": [
          {
            "type": "text",
            "text": "Модульность: Функции позволяют разбивать программу на небольшие части, упрощая её поддержку и изменение."
          },
          {
            "type": "text",
            "text": "Передача данных: Аргументы функции делают её гибкой, позволяя обрабатывать различные данные."
          },
          {
            "type": "text",
            "text": "Возврат значений: Функции возвращают результат, что делает код последовательным и предсказуемым."
          },
          {
            "type": "text",
            "text": "Избежание побочных эффектов: Функции должны работать только с переданными им данными, не изменяя внешние переменные."
          },
          {
            "type": "text",
            "text": "Повторное использование: Один и тот же код можно вызывать в разных частях программы, что сокращает дублирование."
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "Функции делают код более структурированным, легко поддерживаемым и понятным, что является ключевым преимуществом процедурного подхода в JavaScript."
          }
        ]
      }
    ],
    "7": [
      {
        "title": "Использование объектных типов в JavaScript",
        "content": [
          {
            "type": "text",
            "text": "Объекты — это ключевая структура в JavaScript, представляющая коллекцию пар \"ключ-значение\". Они используются для хранения данных и методов, связанных с этими данными."
          }
        ]
      },
      {
        "title": "Создание и доступ",
        "content": [
          {
            "type": "text",
            "text": "Объекты создаются с помощью фигурных скобок. Доступ к свойствам осуществляется через точечную нотацию или скобки."
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   let user = { name: \"Alice\", age: 30 };\n   console.log(user.name); // \"Alice\""
          }
        ]
      },
      {
        "title": "Методы объектов",
        "content": [
          {
            "type": "text",
            "text": "Объекты могут содержать функции (методы), которые работают с их данными."
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   user.greet = function() { console.log(\"Hello, \" + this.name); };"
          }
        ]
      },
      {
        "title": "Добавление/удаление свойств",
        "content": [
          {
            "type": "text",
            "text": "Свойства объектов можно динамически добавлять и удалять."
          },
          {
            "type": "code",
            "language": "JavaScript",
            "code": "   user.isAdmin = true;\n   delete user.age;"
          }
        ]
      },
      {
        "title": "Вложенные объекты и структуры",
        "content": [
          {
            "type": "text",
            "text": "Объекты могут содержать другие объекты для создания сложных данных."
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "Объекты — это гибкие структуры для организации данных и функций, широко используемые в JavaScript для моделирования и обработки данных."
          }
        ]
      }
    ],
    "8": [
      {
        "title": "Создание массивов в JavaScript",
        "content": [
          {
            "type": "text",
            "text": "Массивы — это особый тип объектов в JavaScript, предназначенный для хранения упорядоченных наборов данных."
          }
        ]
      },
      {
        "title": "Создание массива через квадратные скобки",
        "content": [
          {
            "type": "text",
            "text": "Наиболее распространённый способ создания массива."
          },
          {
            "type":"code",
            "language": "JavaScript",
            "code": "   let fruits = [\"Apple\", \"Banana\", \"Orange\"];"
          }
        ]
      },
      {
        "title": "Создание массива с помощью конструктора \"Array\"",
        "content": [
          {
            "type": "text",
            "text": "Можно использовать функцию конструктора \"Array()\"."
          },
          {
            "type":"code",
            "language": "JavaScript",
            "code": "   let numbers = new Array(1, 2, 3, 4);"
          }
        ]
      },
      {
        "title": "Создание пустого массива",
        "content": [
          {
            "type": "text",
            "text": "Создаётся массив без элементов."
          },
          {
            "type":"code",
            "language": "JavaScript",
            "code": "   let emptyArray = [];"
          }
        ]
      },
      {
        "title": "Основные операции с массивами:",
        "content": [
          {
            "type": "text",
            "text": "Доступ к элементам: Элементы массива доступны по индексу, начиная с нуля."
          },
          {
            "type":"code",
            "language": "JavaScript",
            "code": "   console.log(fruits[0]); // \"Apple\""
          },
          {
            "type": "text",
            "text": "Добавление элементов: Можно добавлять элементы в массив, используя методы или просто указав индекс."
          },
          {
            "type":"code",
            "language": "JavaScript",
            "code": "   fruits.push(\"Grapes\"); // добавит элемент в конец"
          },
          {
            "type": "text",
            "text": "Длина массива: Свойство \"length\" возвращает количество элементов в массиве."
          },
          {
            "type":"code",
            "language": "JavaScript",
            "code": "   console.log(fruits.length); // 4"
          },
          {
            "type": "text",
            "text": "Удаление элементов: С помощью \"pop()\" можно удалить последний элемент, а \"shift()\" — первый."
          },
          {
            "type":"code",
            "language": "JavaScript",
            "code": "   fruits.pop(); // удалит \"Grapes\""
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "Массивы в JavaScript — это гибкий инструмент для хранения упорядоченных данных, который легко манипулировать с помощью встроенных методов и операций."
          }
        ]
      }
    ],
  
    "9": [
      {
        "title": "Обработка массивов в JavaScript",
        "content": [
          {
            "type": "text",
            "text": "JavaScript предоставляет множество методов для работы с массивами."
          }
        ]
      },
      {
        "title": "Перебор массива",
        "content": [
          {
            "type": "text",
            "text": "\"forEach()\" — выполняет функцию для каждого элемента."
          }
         
        ]
      },
      {
        "title": "Добавление/удаление",
        "content": [
          {
            "type": "text",
            "text": "\"push()\", \"pop()\" — добавляет/удаляет элемент с конца."
          },
          {
            "type": "text",
            "text": "\"shift()\", \"unshift()\" — удаляет/добавляет элемент с начала."
          }
         
        ]
      },
      {
        "title": "Поиск",
        "content": [
          {
            "type": "text",
            "text": "\"indexOf()\" — возвращает индекс элемента."
          },
          {
            "type": "text",
            "text": "\"includes()\" — проверяет наличие элемента."
          }
         
        ]
      },
      {
        "title": "Изменение массива",
        "content": [
          {
            "type": "text",
            "text": "\"splice()\" — добавляет, удаляет или заменяет элементы."
          }
         
        ]
      },
      {
        "title": "Создание нового массива",
        "content": [
          {
            "type": "text",
            "text": "\"slice()\" — создает копию части массива."
          },
          {
            "type": "text",
            "text": "\"concat()\" — объединяет массивы."
          }
         
        ]
      },
      {
        "title": "Фильтрация и преобразование",
        "content": [
          {
            "type": "text",
            "text": "\"filter()\" — отбирает элементы по условию."
          },
          {
            "type": "text",
            "text": "\"map()\" — преобразует каждый элемент."
          }
         
        ]
      },
      {
        "title": "Фильтрация и преобразование",
        "content": [
          {
            "type": "text",
            "text": "\"sort()\" — сортирует массив."
          },
          {
            "type": "text",
            "text": "\"reverse()\" — переворачивает массив."
          }
         
        ]
      },
      {
        "title": "Редукция",
        "content": [
          {
            "type": "text",
            "text": "\"reduce()\" — сводит массив к одному значению (например, сумма)."
          }
        ]
      },
      {
        "title": "Заключение",
        "content": [
          {
            "type": "text",
            "text": "Массивы в JavaScript легко обрабатываются благодаря множеству встроенных методов для их изменения, поиска и преобразования."
          }
        ]
      }
    ] 
  }
    